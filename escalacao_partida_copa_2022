from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from bs4 import BeautifulSoup as bs
import pandas as pd
import time
import re

#Instalação do Web Driver (robô) para o Chrome
servico = Service(ChromeDriverManager().install())

#Para abrir o browser
navegador = webdriver.Chrome(service=servico)

#Acessando o site
navegador.get("https://www.fifa.com/fifaplus/en/tournaments/mens/worldcup/qatar2022/scores-fixtures?country=BR&wtw-filter=ALL")
time.sleep(5)

#Clicando no botão para aceitar os cookies
try:
    navegador.find_element('xpath', '//*[@id="onetrust-accept-btn-handler"]').click()
    
    time.sleep(2)
except:
    pass

#Coletando o html
site_partidas = bs(navegador.page_source, 'html.parser')

#Criando uma lista para armazenar os dados
dados_partidas = []
links_partidas = []

#Bloco html com todas as partidas
partidas_html_bloco = site_partidas.find('div', attrs={'class': re.compile('where-to-watch-section_containerCentered_.*')})

#Encontrando cada bloco de data com as partidas
datas_html_bloco = partidas_html_bloco.find_all('div', attrs={'class': re.compile('col-xl-12 col-lg-12 ff-pb-24 ff-text-blue-dark col-md-12 col-sm-12.*')})

for data_partidas in datas_html_bloco:

    #Extraindo a data das partidas
    data = data_partidas.find('div', attrs={'class': re.compile('matches-container_title_.*')})
    
    #Bloco das partidas de cada dia
    partidasdodia_bloco_html = data_partidas.find_all('div', attrs={'class': re.compile('col-lg-12 col-md-6 col-sm-12.*')})
    
    for partida_html in partidasdodia_bloco_html:
        
        ##Extraindo o link da partida
        link_partida_html = partida_html.find('a')
        link_partida = link_partida_html['href']
        
        #Extraindo o grupo
        grupo = partida_html.find('div', attrs={'class': re.compile('match-component_wtwStadium_.*')})
        
        #Extraindo os nomes das selecoes
        selecao_casa = partida_html.find_all('span', attrs={'class': re.compile('match-component_wtwTeamName_*')})[0]
        selecao_vis = partida_html.find_all('span', attrs={'class': re.compile('match-component_wtwTeamName_*')})[-1]
        
        #Extraindo o placar
        placar = partida_html.find('span', attrs={'class': re.compile('show-match-score_score_*')})
        
        #Juntando as informações
        dados_partidas.append([data.text, 'https://www.fifa.com'+link_partida, grupo.text, selecao_casa.text, placar.text, selecao_vis.text])
        links_partidas.append(['https://www.fifa.com'+link_partida])
        
#tabela = pd.DataFrame(dados_partidas, columns=['data', 'link_partida', 'grupo', 'selecao_casa', 'placar', 'selecao_vis'])
#tabela.to_excel('dados_partidas_2022.xlsx', index=False)
time.sleep(2)
print('prosseguir')

#Criando uma lista para armazenar os dados
infos_jogadores = []

for url_partidas in links_partidas:
    link_partida = str(url_partidas)
    qtde_letras = len(link_partida)
    url_limpo = link_partida[2:qtde_letras-2].strip()
    
    navegador.get(url_limpo)
    time.sleep(6)

    #Clicando no botão mostrar a escalação da partida
    try:
        navegador.find_element('xpath', '//*[@id="root"]/div/main/div/div[3]/div/div[1]/div/div[2]').click()

        time.sleep(5)
    except:
        navegador.find_element('xpath', '//*[@id="root"]/div/main/div/div[3]/div/div[1]/div/div[2]').click()

    #Coletando o html
    site_esc_partida = bs(navegador.page_source, 'html.parser')

    #Extraindo o bloco html do cabeçalho
    cabecalho_bloco_html = site_esc_partida.find('section', attrs={'class': re.compile('match-details-new-header-section_RelativeContainer_.*')})

    #Extraindo o grupo
    grupo_html = cabecalho_bloco_html.find('div', attrs={'class': re.compile('match-details-header-main-component_MatchDate__1sw6I d-flex.*')})
    grupo = grupo_html.find('p')

    #Extraindo a data e hora da partida
    data_hora_html = cabecalho_bloco_html.find('div', attrs={'class': re.compile('match-details-header-main-component_MatchDate__1sw6I match-details-header-main-component.*')})
    data_hora = data_hora_html.find('p')

    #Bloco html com a partida
    partida_html = cabecalho_bloco_html.find('div', attrs={'class': 'container d-flex justify-content-center align-items-center'})

    #Extraindo o nome das selecoes
    selecao_casa = partida_html.find_all('a')[0]
    selecao_vis = partida_html.find_all('a')[-1]

    #Extraindo o placar
    placar = partida_html.find('span', attrs={'class': re.compile('show-match-score_BigFont__qRZ5P show-match-score_BiggerFont__2lUIG show-match-score_score_.*')})

    #Encontrando o bloco html com a escalação
    escalacao_bloco_html = site_esc_partida.find('div', attrs={'class': 'd-flex flex-column align-items-center'})

    #Encontrando as div's com para cada bloco de jogadores separados por posição
    posicao_jogadores_html = escalacao_bloco_html.find_all('div', attrs={'class': re.compile('match-details-lineup-tab-component_row_.*')})

    #Deixando em loop para coletar as informações de cada agrupamento de jogadores da seleção da casa
    for posicao_html_bloco in posicao_jogadores_html:

        #Buscando o html do bloco de jogadores da posição
        jogadores_html_bloco = posicao_html_bloco.find_all('div', attrs={'class': re.compile('match-details-lineup-tab-component_col_.*')})

        #Encontrando o html do jogador da seleção da casa
        jogador_html = jogadores_html_bloco[0]

        #Tentando extrair a posição do jogador
        try:
            posicao_html = jogador_html.find('h2')
            posicao = posicao_html.find('span', attrs={'class': 'd-none d-md-block'}).
            nome_jogador = 'pular'

            #Juntando as informações na tabela
            infos_jogadores.append([grupo.text, data_hora.text, selecao_casa.text, placar.text, selecao_vis.text, posicao, '', '', '', selecao_casa.text, '', '', '', '', ''])
        except:
            infos_jogadores_html = jogador_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerCardContainer_.*')})
            nome_jogador_html = infos_jogadores_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerName_.*')})
            nome_jogador = nome_jogador_html.find('span', attrs={'class': 'd-none d-md-block'}).get_text().strip()
            posicao = ''

        #Tentando extrair a informação de substituição
        if (nome_jogador) != 'pular':

            #Encontrando o html de cada linha do jogador
            infos_jog_html = jogador_html.find_all('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerContainer_.*')})

            for jogador in infos_jog_html:

                #Extraindo o nome e o número da camiseta do jogador
                numero_jogador = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerNumber_.*')}).get_text().strip()
                nome_jogador_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerName_.*')})
                nome_jogador = nome_jogador_html.find('span', attrs={'class': 'd-none d-md-block'}).get_text().strip()

                try:
                    jogador_substituto_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerReplacement_.*')})
                    numero_jogador_subst = jogador_substituto_html.find('span').get_text().strip()
                    nome_jogador_subst = jogador_substituto_html.find('span', attrs={'class': 'd-none d-md-block'}).get_text().strip()
                    tempo_subst_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerEvents_.*')})
                    tempo_subst = tempo_subst_jog_html.find('span', attrs={'class': re.compile('match-details-lineup-tab-component_subTime_.*')}).get_text().strip()
                except:
                    numero_jogador_subst = ''
                    nome_jogador_subst = ''
                    tempo_subst = ''

                #Tentando extrair a informação de capitão
                try:
                    capitao_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerLogoContainer_.*')})
                    capitao = capitao_jog_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerCaptainIcon_.*')}).get_text().strip()
                except:
                    capitao = ''

                #Tentando extrair o tempo de substituição dos jogadores reservas
                try:
                    tempo_subst_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerEvents_.*')})
                    tempo_subst = tempo_subst_jog_html.find('span', attrs={'class': re.compile('match-details-lineup-tab-component_subTime_.*')}).get_text().strip()
                except:
                    tempo_subst = ''

                #Tentando extrair o evento cartão amarelo do jogador
                try:
                    evento_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerEvents_.*')})
                    cartao_amarelo = evento_jog_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_yellowCard_.*')})
                    cartao_amarelo_class = cartao_amarelo.get('class')[0]
                    cartao_amarelo = cartao_amarelo_class.split('_')
                    if 'yellowCard' in cartao_amarelo:
                        cartao_amarelo = 'Cartão Amarelo' 
                except:
                    cartao_amarelo = ''

                #Tentando extrair o evento cartão vermelho do jogador
                try:
                    evento_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerEvents_.*')})
                    cartao_vermelho = evento_jog_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_redCard_.*')})
                    cartao_vermelho_class = cartao_vermelho.get('class')[0]
                    cartao_vermelho = cartao_vermelho_class.split('_')
                    if 'redCard' in cartao_vermelho:
                        cartao_vermelho = 'Cartão Vermelho' 
                except:
                    cartao_vermelho = ''

                #Tentando extrair o evento gol do jogador
                try:
                    evento_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerEvents_.*')})
                    evento_gol = evento_jog_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_goalText_.*')})
                    gol_class = evento_gol.get('class')[0]
                    gol = gol_class.split('_')
                    if 'goalText' in gol:
                        gol = 'Gol'
                except:
                    gol = ''

                selecao = selecao_casa.text

                #Juntando as informações na tabela
                infos_jogadores.append([grupo.text, data_hora.text, selecao_casa.text, placar.text, selecao_vis.text, posicao, nome_jogador, numero_jogador, tempo_subst, selecao, capitao, cartao_amarelo, cartao_vermelho, gol, nome_jogador_subst, numero_jogador_subst])

            else:
                numero_jogador = ''
                nome_jogador = ''
                tempo_subst = ''
                capitao = ''
                cartao_amarelo = ''
                cartao_vermelho = ''
                gol = ''
                numero_jogador_subst = ''
                nome_jogador_subst = ''
                selecao = selecao_casa.text

                #Juntando as informações na tabela
                infos_jogadores.append([grupo.text, data_hora.text, selecao_casa.text, placar.text, selecao_vis.text, posicao, nome_jogador, numero_jogador, tempo_subst, selecao, capitao, cartao_amarelo, cartao_vermelho, gol, nome_jogador_subst, numero_jogador_subst])

    #Deixando em loop para coletar as informações de cada agrupamento de jogadores da seleção visitante
    for posicao_html_bloco in posicao_jogadores_html:

        #Buscando o html do bloco de jogadores da posição
        jogadores_html_bloco = posicao_html_bloco.find_all('div', attrs={'class': re.compile('match-details-lineup-tab-component_col_.*')})

        #Encontrando o html do jogador da seleção visitante
        jogador_html = jogadores_html_bloco[-1]

        #Tentando extrair a posição do jogador
        try:
            posicao_html = jogador_html.find('h2')
            posicao = posicao_html.find('span', attrs={'class': 'd-none d-md-block'}).get_text().strip()
            nome_jogador = 'pular'

            #Juntando as informações na tabela
            infos_jogadores.append([grupo.text, data_hora.text, selecao_casa.text, placar.text, selecao_vis.text, posicao, '', '', '', selecao_vis.text, '', '', '', '', ''])
        except:
            infos_jogadores_html = jogador_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerCardContainer_.*')})
            nome_jogador_html = infos_jogadores_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerName_.*')})
            nome_jogador = nome_jogador_html.find('span', attrs={'class': 'd-none d-md-block'}).get_text().strip()
            posicao = ''

        #Deixando em loop para coletar as informações de cada jogador da seleção visitante
        if (nome_jogador) != 'pular':

            #Encontrando o html de cada linha do jogador
            infos_jog_html = jogador_html.find_all('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerContainer_.*')})

            for jogador in infos_jog_html:

                #Extraindo o nome e o número da camiseta do jogador
                numero_jogador = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerNumber_.*')}).get_text().strip()
                nome_jogador_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerName_.*')})
                nome_jogador = nome_jogador_html.find('span', attrs={'class': 'd-none d-md-block'}).get_text().strip()

                #Tentando extrair a informação de substituição
                try:
                    jogador_substituto_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerReplacement_.*')})
                    numero_jogador_subst = jogador_substituto_html.find('span').get_text().strip()
                    nome_jogador_subst = jogador_substituto_html.find('span', attrs={'class': 'd-none d-md-block'}).get_text().strip()
                    tempo_subst_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerEvents_.*')})
                    tempo_subst = tempo_subst_jog_html.find('span', attrs={'class': re.compile('match-details-lineup-tab-component_subTime_.*')}).get_text().strip()
                except:
                    numero_jogador_subst = ''
                    nome_jogador_subst = ''
                    tempo_subst = ''

                #Tentando extrair a informação de capitão
                try:
                    capitao_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerLogoContainer_.*')})
                    capitao = capitao_jog_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerCaptainIcon_.*')}).get_text().strip()
                except:
                    capitao = ''

                #Tentando extrair o tempo de substituição dos jogadores reservas
                try:
                    tempo_subst_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerEvents_.*')})
                    tempo_subst = tempo_subst_jog_html.find('span', attrs={'class': re.compile('match-details-lineup-tab-component_subTime_.*')}).get_text().strip()
                except:
                    tempo_subst = ''

                #Tentando extrair o evento cartão amarelo do jogador
                try:
                    evento_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerEvents_.*')})
                    cartao_amarelo = evento_jog_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_yellowCard_.*')})
                    cartao_amarelo_class = cartao_amarelo.get('class')[0]
                    cartao_amarelo = cartao_amarelo_class.split('_')
                    if 'yellowCard' in cartao_amarelo:
                        cartao_amarelo = 'Cartão Amarelo' 
                except:
                    cartao_amarelo = ''            

                #Tentando extrair o evento cartão vermelho do jogador
                try:
                    evento_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerEvents_.*')})
                    cartao_vermelho = evento_jog_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_redCard_.*')})
                    cartao_vermelho_class = cartao_vermelho.get('class')[0]
                    cartao_vermelho = cartao_vermelho_class.split('_')
                    if 'redCard' in cartao_vermelho:
                        cartao_vermelho = 'Cartão Vermelho'
                except:
                    cartao_vermelho = ''

                #Tentando extrair o evento gol do jogador
                try:
                    evento_jog_html = jogador.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_playerEvents_.*')})
                    evento_gol = evento_jog_html.find('div', attrs={'class': re.compile('match-details-lineup-tab-component_goalText_.*')})
                    gol_class = evento_gol.get('class')[0]
                    gol = gol_class.split('_')
                    if 'goalText' in gol:
                        gol = 'Gol'
                except:
                    gol = ''

                selecao = selecao_vis.text

                #Juntando as informações na tabela
                infos_jogadores.append([grupo.text, data_hora.text, selecao_casa.text, placar.text, selecao_vis.text, posicao, nome_jogador, numero_jogador, tempo_subst, selecao, capitao, cartao_amarelo, cartao_vermelho, gol, nome_jogador_subst, numero_jogador_subst])

            else:
                numero_jogador = ''
                nome_jogador = ''
                tempo_subst = ''
                capitao = ''
                cartao_amarelo = ''
                cartao_vermelho = ''
                gol = ''
                numero_jogador_subst = ''
                nome_jogador_subst = ''
                selecao = selecao_vis.text

                #Juntando as informações na tabela
                infos_jogadores.append([grupo.text, data_hora.text, selecao_casa.text, placar.text, selecao_vis.text, posicao, nome_jogador, numero_jogador, tempo_subst, selecao, capitao, cartao_amarelo, cartao_vermelho, gol, nome_jogador_subst, numero_jogador_subst])
            
time.sleep(5)
print('prosseguir agora')

tabela = pd.DataFrame(infos_jogadores, columns=['grupo', 'data_hora', 'selecao_casa', 'placar', 'selecao_vis', 'posicao', 'nome_jogador', 'numero_camiseta', 'tempo_subst', 'selecao', 'capitao', 'cartao_amarelo', 'cartao_vermelho', 'gol', 'nome_jog_subst', 'numero_jog_subst'])
tabela.to_excel('escalacao_partidas_2022_teste.xlsx', index=False)
